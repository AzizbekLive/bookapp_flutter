import 'package:bookapp_flutter/data/local/shared_preferences.dart';import 'package:bookapp_flutter/ui/pages/home/home_page.dart';import 'package:bookapp_flutter/ui/pages/register/register_page.dart';import 'package:bookapp_flutter/utils/utils.dart';import 'package:flutter/material.dart';import 'package:flutter_bloc/flutter_bloc.dart';import '../../widgets/button_get_started.dart';import 'bloc/splash_bloc.dart';class SplashPage extends StatelessWidget {  const SplashPage({super.key});  @override  Widget build(BuildContext context) {    return BlocProvider<SplashBloc>(      create: (_) => SplashBloc(),      child: Scaffold(        backgroundColor: const Color(0xffe4e4e4),        body: Column(          children: [            Flexible(              flex: 2,              child: Stack(                children: [                  Padding(                    padding:                        const EdgeInsets.symmetric(horizontal: 35, vertical: 2),                    child: Align(                      alignment: Alignment.bottomCenter,                      child: Hero(                          tag: "main_logo",                          child: Image.asset(                            '${imagePath}app_logo.png',                            fit: BoxFit.cover,                          )),                    ),                  ),                  Image.asset('${imagePath}vector1.png')                ],              ),            ),            Flexible(              flex: 3,              child: Stack(                children: [                  Align(                    alignment: Alignment.bottomCenter,                    child: Image.asset(                      'assets/gifs/phone.gif',                      width: double.infinity,                      height: 400,                      fit: BoxFit.cover,                    ),                  ),                  Align(                    alignment: Alignment.bottomRight,                    child: Padding(                      padding: const EdgeInsets.symmetric(                          horizontal: 20, vertical: 50),                      child: BlocConsumer<SplashBloc, SplashState>(                        listener: (context, state) {                          if (state is ClickState) {                            print("isRegistered ${MyPreferences.isRegister()}");                            if (MyPreferences.isRegister() == true) {                              Navigator.pushReplacement(                                context,                                PageRouteBuilder(                                  pageBuilder: (context, animation, secondaryAnimation) => const HomePage(),                                  transitionsBuilder: (context, animation, secondaryAnimation, child) {                                    const begin = Offset(1.0, 0.0);                                    const end = Offset.zero;                                    const curve = Curves.ease;                                    var tween = Tween(begin: begin, end: end).chain(CurveTween(curve: curve));                                    var offsetAnimation = animation.drive(tween);                                    return SlideTransition(                                      position: offsetAnimation,                                      child: child,                                    );                                  },                                ),                              );                            } else {                              Navigator.push(                                context,                                PageRouteBuilder(                                  pageBuilder: (context, animation, secondaryAnimation) => RegisterPage(),                                  transitionsBuilder: (context, animation, secondaryAnimation, child) {                                    const begin = Offset(1.0, 0.0);                                    const end = Offset.zero;                                    const curve = Curves.ease;                                    var tween = Tween(begin: begin, end: end).chain(CurveTween(curve: curve));                                    var offsetAnimation = animation.drive(tween);                                    return SlideTransition(                                      position: offsetAnimation,                                      child: child,                                    );                                  },                                ),                              );                            }                          }                        },                        builder: (context, state) {                          return getStartedButton(() {                            context.read<SplashBloc>().add(ClickEvent());                          });                        },                      ),                    ),                  ),                ],              ),            ),          ],        ),      ),    );  }}